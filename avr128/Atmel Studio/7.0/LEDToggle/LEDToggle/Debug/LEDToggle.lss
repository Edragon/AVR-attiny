
LEDToggle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fea  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003626  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d8  00000000  00000000  000079dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000083b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bbd  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000a233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  fc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
 100:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	df e7       	ldi	r29, 0x7F	; 127
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0e 94 91 00 	call	0x122	; 0x122 <main>
 114:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 11c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <system_init>
 120:	08 95       	ret

00000122 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 122:	0e 94 8e 00 	call	0x11c	; 0x11c <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		/* Check the status of SW0 */
		/* 0: Pressed */
		if (!SW0_get_level()) {
 126:	57 99       	sbic	0x0a, 7	; 10
 128:	04 c0       	rjmp	.+8      	; 0x132 <main+0x10>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 12a:	89 b1       	in	r24, 0x09	; 9
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	89 b9       	out	0x09, r24	; 9
 130:	fa cf       	rjmp	.-12     	; 0x126 <main+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 132:	89 b1       	in	r24, 0x09	; 9
 134:	8f 7b       	andi	r24, 0xBF	; 191
 136:	89 b9       	out	0x09, r24	; 9
 138:	f6 cf       	rjmp	.-20     	; 0x126 <main+0x4>

0000013a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 13a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret

00000142 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret

0000014a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 14e:	e8 2f       	mov	r30, r24
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 5f       	subi	r30, 0xF0	; 240
 154:	fb 4f       	sbci	r31, 0xFB	; 251
 156:	90 81       	ld	r25, Z
 158:	98 60       	ori	r25, 0x08	; 8
 15a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	b0 f3       	brcs	.-20     	; 0x14e <mcu_init+0x4>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 5d       	subi	r30, 0xD0	; 208
 16c:	fb 4f       	sbci	r31, 0xFB	; 251
 16e:	90 81       	ld	r25, Z
 170:	98 60       	ori	r25, 0x08	; 8
 172:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	b0 f3       	brcs	.-20     	; 0x166 <mcu_init+0x1c>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 c0       	rjmp	.+16     	; 0x18e <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 5b       	subi	r30, 0xB0	; 176
 184:	fb 4f       	sbci	r31, 0xFB	; 251
 186:	90 81       	ld	r25, Z
 188:	98 60       	ori	r25, 0x08	; 8
 18a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	b0 f3       	brcs	.-20     	; 0x17e <mcu_init+0x34>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 196:	e8 2f       	mov	r30, r24
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e0 59       	subi	r30, 0x90	; 144
 19c:	fb 4f       	sbci	r31, 0xFB	; 251
 19e:	90 81       	ld	r25, Z
 1a0:	98 60       	ori	r25, 0x08	; 8
 1a2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	b0 f3       	brcs	.-20     	; 0x196 <mcu_init+0x4c>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1ae:	e8 2f       	mov	r30, r24
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	e0 57       	subi	r30, 0x70	; 112
 1b4:	fb 4f       	sbci	r31, 0xFB	; 251
 1b6:	90 81       	ld	r25, Z
 1b8:	98 60       	ori	r25, 0x08	; 8
 1ba:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	b0 f3       	brcs	.-20     	; 0x1ae <mcu_init+0x64>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1c6:	e8 2f       	mov	r30, r24
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 55       	subi	r30, 0x50	; 80
 1cc:	fb 4f       	sbci	r31, 0xFB	; 251
 1ce:	90 81       	ld	r25, Z
 1d0:	98 60       	ori	r25, 0x08	; 8
 1d2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	88 30       	cpi	r24, 0x08	; 8
 1d8:	b0 f3       	brcs	.-20     	; 0x1c6 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 1da:	08 95       	ret

000001dc <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1dc:	0e 94 a5 00 	call	0x14a	; 0x14a <mcu_init>
 1e0:	89 b1       	in	r24, 0x09	; 9
 1e2:	8f 7b       	andi	r24, 0xBF	; 191
 1e4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 1f2:	e7 e5       	ldi	r30, 0x57	; 87
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
 1f6:	80 81       	ld	r24, Z
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
 1fc:	0e 94 a1 00 	call	0x142	; 0x142 <CLKCTRL_init>

	SLPCTRL_init();
 200:	0e 94 07 01 	call	0x20e	; 0x20e <SLPCTRL_init>

	CPUINT_init();
 204:	0e 94 a3 00 	call	0x146	; 0x146 <CPUINT_init>

	BOD_init();
 208:	0e 94 9d 00 	call	0x13a	; 0x13a <BOD_init>
 20c:	08 95       	ret

0000020e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
